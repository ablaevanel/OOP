// ПОСТАНОВКА ЗАДАЧИ

// Спроектировать объект, в котором есть доступные и скрытые элементы (свойства и методы). 
// Есть одно доступное свойство целого типа и одно скрытое свойство целого типа.
// У объекта есть параметризированный конструктор с параметром целого типа.
// В конструкторе доступному свойству присваивается значение параметра, а скрытому свойству удвоенное значение параметра.
// У объекта есть доступные методы со следующим функционалом:
//   1. Метод изменения значения доступного и скрытого свойства. Доступному свойству добавляется 1, скрытому свойству добавляется 4.
//   2. Метод вызова скрытого метода.
//   3. Метод вывода состояния, выводит значение доступного и скрытого свойства.
// У объекта есть один скрытый метод со следующим функционалом:
//   1. Метод доступному свойству добавляет 5, скрытому свойству добавляет 7.
// Написать программу, которая состоит из описания класса вышепредставленного объекта и основной функции, в которой реализован следующий алгоритм:
//   1. Ввод целочисленного значения переменной i_data.
//   2. Создание объекта, параметризированному конструктору которого в качестве аргумента передается переменная i_data.
//   3. Вывод исходного состояния объекта.
//   4. Вызов метода изменения значений свойств объекта.
//   5. Вывод текущего состояния объекта.
//   6. Ввод целочисленного значения переменной i_data.
//   7. Непосредственное изменение доступного свойства объекта посредством умножения его значения на i_data.
//   8. Вывод текущего состояния объекта.
//   9. Вызов метода объекта, который вызывает скрытый метод объекта.
//   10. Вывод текущего состояния объекта.
    
// 1. Описание входных данных
// Первая строка
// «Целочисленное значение»
// Вторая строка
// «Целочисленное значение»
  
// 2. Описание выходных данных
// Метод вывода состояния первый вывод делает в первой строке, а далее всегда с новой строки. 
// Шаблон вывода:
// Value of the available property «значение доступного свойства»; Value of a hidden property «значение закрытого свойства»

#include <iostream>
using namespace std;
class obj{
  public:
    int x;
    obj(int z){
      x = z;
      y = 2 * z;
    }
    void change1(){
      x += 1;
      y += 4;
    }
    void show(){
      if (flag){
        cout << endl;
      }
      cout << "Value of the available property " << x << "; Value of a hidden property " << y;
      flag = true;
    }
    void call_change2(){
      change2();
    }
  private:
    int y;
    bool flag = false;
    void change2(){
      x += 5;
      y += 7;
    }
};

int main(){
  int i_data;
  cin >> i_data;
  obj a(i_data);
  a.show();
  a.change1();
  a.show();
  cin >> i_data;
  a.x *= i_data;
  a.show();
  a.call_change2();
  a.show();
  return(0);
}
